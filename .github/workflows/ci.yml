name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.4.0"

jobs:
  # ============================================================================
  # CODE QUALITY JOB - Linting, Formatting, and Pre-commit Hooks
  # ============================================================================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"
          uv pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Run pre-commit on all files
        run: |
          source .venv/bin/activate
          pre-commit run --all-files --show-diff-on-failure

      - name: Check for trailing whitespace
        run: |
          source .venv/bin/activate
          pre-commit run trailing-whitespace --all-files

      - name: Check YAML files
        run: |
          source .venv/bin/activate
          pre-commit run check-yaml --all-files

      - name: Check TOML files
        run: |
          source .venv/bin/activate
          pre-commit run check-toml --all-files

      - name: Ruff linting
        run: |
          source .venv/bin/activate
          ruff check src/ tests/ --output-format=github

      - name: Ruff formatting check
        run: |
          source .venv/bin/activate
          ruff format --check src/ tests/

  # ============================================================================
  # TYPE CHECKING JOB - Static Type Analysis with MyPy
  # ============================================================================
  type-checking:
    name: Type Checking (MyPy)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"
          uv sync --group dev

      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ hashFiles('mypy.ini', 'pyproject.toml') }}
          restore-keys: |
            mypy-${{ runner.os }}-

      - name: Run MyPy type checking
        run: |
          source .venv/bin/activate
          uv run mypy src/ --config-file=mypy.ini --show-error-codes --pretty

      - name: Run MyPy on tests
        run: |
          source .venv/bin/activate
          mypy tests/ --config-file=mypy.ini --show-error-codes --pretty
        continue-on-error: true  # Tests may have different type requirements

  # ============================================================================
  # TESTING JOB - Unit and Integration Tests with Coverage
  # ============================================================================
  test:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
        # Add more Python versions if needed for compatibility testing
        # python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          uv pip install -e ".[dev]"
          uv sync --group test

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          uv pip install -e ".[dev]"
          uv sync --group test

      - name: Run pytest with coverage (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          pytest -v --cov=todo_cli --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Run pytest with coverage (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\activate
          pytest -v --cov=todo_cli --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Check coverage threshold
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          coverage report --fail-under=80

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7

  # ============================================================================
  # SECURITY SCANNING JOB - Dependency Vulnerabilities and Security Issues
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"
          uv pip install safety bandit[toml]

      - name: Run Safety check for known vulnerabilities
        run: |
          source .venv/bin/activate
          safety check --json || true

      - name: Run Bandit security linter
        run: |
          source .venv/bin/activate
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f screen

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30

  # ============================================================================
  # BUILD JOB - Package Building and Distribution Validation
  # ============================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Build package
        run: |
          uv build

      - name: Check package metadata
        run: |
          uv pip install twine
          twine check dist/*

      - name: Test installation from wheel
        run: |
          uv venv test-env
          source test-env/bin/activate
          uv pip install dist/*.whl
          todo --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  # ============================================================================
  # DEPENDENCY REVIEW JOB - Check for Dependency Changes (PR only)
  # ============================================================================
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # ============================================================================
  # FINAL STATUS CHECK - All Jobs Must Pass
  # ============================================================================
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [code-quality, type-checking, test, security, build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.type-checking.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "One or more CI jobs failed!"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
