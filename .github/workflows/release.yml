name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.4.0"

jobs:
  # ============================================================================
  # VALIDATE RELEASE - Ensure all quality gates pass before release
  # ============================================================================
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run all tests
        run: |
          source .venv/bin/activate
          pytest -v --cov=todo_cli --cov-fail-under=80

      - name: Run type checking
        run: |
          source .venv/bin/activate
          mypy src/

      - name: Run linting
        run: |
          source .venv/bin/activate
          ruff check src/ tests/

  # ============================================================================
  # BUILD AND PUBLISH - Create distribution packages
  # ============================================================================
  build:
    name: Build Distribution
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Build package
        run: |
          uv build

      - name: Verify distribution
        run: |
          uv pip install twine
          twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # ============================================================================
  # CREATE GITHUB RELEASE - Create release with changelog
  # ============================================================================
  github-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## üéâ Release v${{ steps.version.outputs.version }}

            ### üìù Changes
            ${{ steps.changelog.outputs.changelog }}

            ### üì¶ Installation
            ```bash
            pip install todo-cli==${{ steps.version.outputs.version }}
            ```

            Or download the wheel/source distribution from the assets below.
          files: |
            dist/*
          draft: false
          prerelease: false

  # ============================================================================
  # PUBLISH TO PYPI - Publish to Python Package Index (optional)
  # ============================================================================
  # Uncomment when ready to publish to PyPI
  # publish-pypi:
  #   name: Publish to PyPI
  #   needs: github-release
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: dist
  #         path: dist/
  #
  #     - name: Publish to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         password: ${{ secrets.PYPI_API_TOKEN }}
